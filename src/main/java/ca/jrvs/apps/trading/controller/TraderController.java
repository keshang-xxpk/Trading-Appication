package ca.jrvs.apps.trading.controller;

import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.model.view.TraderAccountView;
import ca.jrvs.apps.trading.service.FundTransferService;
import ca.jrvs.apps.trading.service.RegisterService;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller
@RequestMapping("/trader")
public class TraderController {

    private RegisterService registerService;
    private FundTransferService fundTransferService;

    @Autowired
    public TraderController(RegisterService registerService,
                            FundTransferService fundTransferService) {
        this.registerService = registerService;
        this.fundTransferService = fundTransferService;
    }


    @ResponseStatus(HttpStatus.CREATED)
    @ResponseBody
    @PostMapping(path = "/firstname/{firstname}/lastname/{lastname}/dob/{dob}/country/{country}/email/{email}",
            produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
    public TraderAccountView createTrader(
            @PathVariable String firstname,
            @PathVariable String lastname,
            @PathVariable String dob,
            @PathVariable String country,
            @PathVariable String email) {
        try {
            Trader trader = new Trader();
            trader.setFirstName(firstname);
            trader.setLastName(lastname);
            trader.setDob(dob);
            trader.setCountry(country);
            trader.setEmail(email);
            return registerService.createTraderAndAccount(trader);
        } catch (Exception e) {
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }


    @ApiOperation(value = "Create a trader and an account with DTO",
            notes = "TraderId and AccountID are auto generated by the database")
    @ResponseStatus(HttpStatus.CREATED)
    @ResponseBody
    @PostMapping(path = "/", produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
    public TraderAccountView createTrader(@RequestBody Trader trader) {
        try {
            return registerService.createTraderAndAccount(trader);
        } catch (Exception e) {
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }


    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    @PostMapping(path = "/deposit/accountId/{accountId}/amount/{amount}",
            produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
    public Account depositFund(@PathVariable Integer accountID, @PathVariable double amount) {
        try {
            return fundTransferService.deposit(accountID, amount);
        } catch (Exception e) {
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }


    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    @PostMapping(path = "/withdraw/accountId/{accountId}/amount/{amount}",
            produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
    public Account withdrawFund(@PathVariable Integer accountID, @PathVariable double amount) {
        try {
            return fundTransferService.withdraw(accountID, amount);
        } catch (Exception e) {
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }


    @ResponseStatus(HttpStatus.OK)
    @PostMapping(path = "/traderId/{traderId}")
    public void deleteTrader(@PathVariable Integer traderId) {
        try {
            registerService.deleteTraderById(traderId);
        } catch (Exception e) {
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }
}