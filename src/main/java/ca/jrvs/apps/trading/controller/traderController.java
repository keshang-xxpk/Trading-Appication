package ca.jrvs.apps.trading.controller;

import ca.jrvs.apps.trading.dao.*;
import ca.jrvs.apps.trading.model.domain.IexQuote;
import ca.jrvs.apps.trading.model.domain.Quote;
import ca.jrvs.apps.trading.service.FundTransferService;
import ca.jrvs.apps.trading.service.QuoteService;
import ca.jrvs.apps.trading.service.RegisterService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Collections;
import java.util.List;

@Api(value = "trader", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)//?
@Controller
@RequestMapping(value = "/trader")
public class TraderController {


    private FundTransferService fundTransferService;
    private RegisterService registerService;
    private AccountDao accountDao;
    private TraderDao traderDao;
    private SecurityOrderDao securityOrderDao;
    private PositionDao positionDao;

    @Autowired
    public  TraderController(FundTransferService fundTransferService,
                             RegisterService registerService,
                             AccountDao accountDao,
                             TraderDao traderDao,
                             SecurityOrderDao securityOrderDao,
                             PositionDao positionDao) {
        this.fundTransferService = fundTransferService;
        this.registerService = registerService;
        this.accountDao = accountDao;
        this.traderDao = traderDao;
        this.securityOrderDao = securityOrderDao;
        this. positionDao = positionDao;
    }

    @ApiOperation(value = "Delete a trader",
            notes = "Delete a trader IFF its account amount is 0 and no open positions. Also delete the associated account and securityOrders.")
    @PutMapping(path = "/iexMarketData")
    @ResponseStatus(HttpStatus.OK)
    public void deleteTraderByTraderId(Integer traderId) {
        try {
            registerService.deleteTraderById(traderId);
        } catch (Exception e) {
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }

    @ApiOperation(value = "Create a trader and an account with DTO",
            notes = "TraderId and AccountId are auto generated by the database, and they should be identical")
    @PutMapping(path = "/")
    @ResponseStatus(HttpStatus.OK)
    public void createTrader(@RequestBody Quote quote) {
        try {
            quoteDao.update(Collections.singletonList(quote));
        } catch (Exception e) {
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }

    @ApiOperation(value = "Add a new ticker to the dailyList(quote table)",
            notes = "Add a new ticker/symbol to the quote table,so trader can trade this security.")
    @PostMapping(path = "/tickerId/{tickerId}")
    @ResponseStatus(HttpStatus.CREATED)
    @ApiResponses(value = {@ApiResponse(code = 404, message = "ticker is not found in IEX system")})
    public void createQuote(@PathVariable String tickerId) {
        try {
            quoteService.initQuote(tickerId);
        } catch (Exception e) {
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }

    @ApiOperation(value = "Show the dailyList", notes = "Show dailyList for this trading system,DailyList = Quote Table")
    @GetMapping(path = "/dailyList")
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    public List<Quote> getDailyList() {
        try {
            return quoteDao.findAll();
        } catch (Exception e) {
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }

    @ApiOperation(value = "Show the dailyList", notes = "new dailyList for this trading system.DailyList = Quote Table")
    @ApiResponses(value = {@ApiResponse(code = 404, message = "ticker is not found")})
    @GetMapping(path = "/iex/ticker/{ticker}")
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    public IexQuote getQuote(@PathVariable String ticker) {
        try {
            return marketDataDao.findIexQuoteByTicker(ticker);
        } catch (Exception e) {
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }
}

